<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.d9beud.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.d9beud.com/" rel="alternate" type="text/html" /><updated>2024-04-18T23:51:01+02:00</updated><id>https://blog.d9beud.com/feed.xml</id><title type="html">d9beuD’s Blog</title><subtitle>A blog about web development, programming, and other tech-related topics. I want to share my knowledge and experience with the community. I will mainly write about PHP, Symfony, Vue.js, Jekyll, Api Platform, and other technologies I use.</subtitle><author><name>Vincent BATHELIER</name></author><entry><title type="html">Welcome to Jekyll!</title><link href="https://blog.d9beud.com/2024/04/16/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-04-16T14:58:28+02:00</published><updated>2024-04-18T23:50:32+02:00</updated><id>https://blog.d9beud.com/2024/04/16/welcome-to-jekyll</id><content type="html" xml:base="https://blog.d9beud.com/2024/04/16/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code>_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code>jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code>YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code>YEAR</code> is a four-digit number, <code>MONTH</code> and <code>DAY</code> are both two-digit numbers, and <code>MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<pre><code class="language-php"># src/Entity/User.php
namespace App\Entity;

use ApiPlatform\Metadata\ApiResource; // [!code highlight:2]
use ApiPlatform\Metadata\Delete;

#[ORM\Entity(repositoryClass: UserRepository::class)]
#[ORM\UniqueConstraint(name: 'UNIQ_IDENTIFIER_EMAIL', fields: ['email'])]
#[ApiResource(
    operations: [
        new GetCollection(),
        new Post(processor: UserPasswordHasher::class, validationContext: ['groups' =&gt; ['Default', 'user:create']]),
        new Get(
            uriTemplate: '/users/me', // [!code error]
            security: "is_granted('ROLE_USER') and object == user", // [!code warning]
            provider: CurrentUserProvider::class,
            openapi: new Operation(
                summary: 'Retrieves the current user',
            )
        ),
        new Get(), // [!code --]
        new Put(processor: UserPasswordHasher::class), // [!code ++]
        new Patch(processor: UserPasswordHasher::class),
        new Delete(),
    ],
    normalizationContext: ['groups' =&gt; ['user:read']],
    denormalizationContext: ['groups' =&gt; ['user:create', 'user:update']],
)]
class User extends Manager implements UserInterface, PasswordAuthenticatedUserInterface, OAuthAwareUserProviderInterface
{
    #[Groups(['user:read'])]
    private ?int $id;

    #[Assert\NotBlank]
    #[Assert\Email]
    #[Groups(['user:read', 'user:create', 'user:update'])]
    #[ORM\Column(length: 254)]
    private ?string $email = null;

    /**
     * @var list&lt;string&gt; The user roles
     */
    #[ORM\Column]
    private array $roles = [];

    public function __construct()
    {
        $this-&gt;memberships = new ArrayCollection();
        Test(name: 'test');
    }

    public function loadUserByOAuthUserResponse(UserResponseInterface $response): UserInterface {
        $this-&gt;setEmail($response-&gt;getEmail());
        $this-&gt;setFirstname($response-&gt;getFirstName());
        $this-&gt;setLastname($response-&gt;getLastName());
        $this-&gt;setAvatar($response-&gt;getProfilePicture());
        $this-&gt;setGoogleId($response-&gt;getUserIdentifier());

        return $this;
    }
}
</code></pre>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Vincent BATHELIER</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>