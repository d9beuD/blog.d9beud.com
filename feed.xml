<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.d9beud.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.d9beud.com/" rel="alternate" type="text/html" /><updated>2024-11-05T19:37:40+01:00</updated><id>https://blog.d9beud.com/feed.xml</id><title type="html">d9beuD’s Blog</title><subtitle>A blog about web development, programming, and other tech-related topics. I want to share my knowledge and experience with the community. I will mainly write about PHP, Symfony, Vue.js, Jekyll, Api Platform, and other technologies I use.</subtitle><author><name>Vincent BATHELIER</name></author><entry><title type="html">Log your users in with Google OAuth, API Platform and Vue.js</title><link href="https://blog.d9beud.com/2024/04/19/log-your-users-in-with-google-oauth-and-api-platform.html" rel="alternate" type="text/html" title="Log your users in with Google OAuth, API Platform and Vue.js" /><published>2024-04-19T20:43:00+02:00</published><updated>2024-11-05T19:37:10+01:00</updated><id>https://blog.d9beud.com/2024/04/19/log-your-users-in-with-google-oauth-and-api-platform</id><content type="html" xml:base="https://blog.d9beud.com/2024/04/19/log-your-users-in-with-google-oauth-and-api-platform.html"><![CDATA[<p>I recently started a new project using <strong>Symfony 7</strong>, <strong>API Platform</strong>, and <strong>Vue.js 3</strong>. I wanted to allow users to log in or register with their Google account. Here is how I did it.</p>

<p>First, like you probably did, I looked online for a bundle that would help me with that. I found <a href="https://github.com/knpuniversity/oauth2-client-bundle"><code>knpuniversity/oauth2-client-bundle</code></a> which was promising. Reading in their <code>README.md</code>, I saw the following:</p>

<blockquote>
  <p>Not sure which to use? If you need OAuth (social) authentication &amp; registration, try <a href="https://github.com/hwi/HWIOAuthBundle">hwi/oauth-bundle</a>. If you don’t like it, come back!</p>
</blockquote>

<p>So what they say is that <code>HWIOAuthBundle</code> is exactly what I need? Yeah, but no. It’s not that simple. I’ll explain why and give you a solution.</p>

<h2 id="the-idea">The idea</h2>

<p>The idea is to use <code>HWIOAuthBundle</code> to authenticate users with Google. Once authenticated, we will generate a JWT token with <a href="https://github.com/lexik/LexikJWTAuthenticationBundle"><code>lexik/jwt-authentication-bundle</code></a> and send it back to the user. The user will then use this token to authenticate with our API.</p>

<p>It works great if the Symfony application is handling the frontend. But in our case, <strong>we are using Vue.js</strong>. The problem is that OAuth applications are not allowed to have multiple redirect URIs (it’s the URI where the OAuth server responds with its access token). So we can’t have one for the Symfony application and one for the Vue.js application.</p>

<p>Because the OAuth process is handled by the Symfony application, when the user triggers the login with Google from the Vue.js frontend, we need to open a new window to the backend. The backend will redirect to the Google SSO page, allowing the user to enter its credentials. Once the user is authenticated, Google redirects to the backend with an access token within query parameters, then the backend will send the JWT token back to the frontend.</p>

<p><a href="https://mermaid.live/edit#pako:eNp9kL1uQjEMhV_F8tIBeIEMDLQSVVWJSlB1uYubGLgi10njRKhCvHsDN_0RQzNEPvIX5_ic0AbHaFD5o7BYfuhpl2joBOpZpHBUTrP5fNJKA6_1But7e1Do8D6IsM1w7PMeliHsPHd4-_glxBINrCKLQgxxVuKIXBsVWJA9sDgDz4Gcwvso25hR_KWWnLV9dqeQWGMQ5X9w4USZ4eltcws1a-uq9Lf_4-t76UcS5_lK4BQHTgP1rqZ2uvAd5j0PdW9TS8dbKj5fQjhXlEoO60-xaHIqPMUSXXXSQkazJa98_gJgh4JB"><img src="https://mermaid.ink/svg/pako:eNp9kLFOAzEMhl_F8sJA7wUydChIRQgJpIJYbjGJ256ac0KcqEJV352kd4BgIEPkX_6c_P5PaINjNKj8Xlgs3w60SzT2AvWsUjgqp265nCsDL_UG6wd7UOjxJoiwzXAc8h7WIew89_h39vopxBINPEYWhRhiV-LEXBqNWJE9sDgDD4Gcwtsk54cm0Ux8UWvOOn93pZBYYxDlf3DhRJnh_vX5N1Spbna3qVp_iMla63-vfkfiPF8YXODIaaTB1ehObaLHvOexbm9q6XhLxecWxbmiVHLYfIhFk1PhBZboqps5aTRb8srnT4F_gyA" alt="" /></a></p>

<h2 id="setting-up-hwioauthbundle">Setting up <code>HWIOAuthBundle</code></h2>

<p>First, let’s install <code>HWIOAuthBundle</code> in our Symfony project:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">composer</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> require</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> hwi/oauth-bundle</span></span></code></pre>
</div>

<p>Thanks to the Symfony Flex recipe, the bundle is now installed and configured to work with Symfony. We need to configure our OAuth provider, Google in our case. Here is the configuration I used:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># config/packages/hwi_oauth.yaml</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">hwi_oauth</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  resource_owners</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    google</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      type</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:                </span><span style="color:#032F62;--shiki-dark:#9ECBFF">google</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      client_id</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:           </span><span style="color:#032F62;--shiki-dark:#9ECBFF">'%env(GOOGLE_ID)%'</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      client_secret</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:       </span><span style="color:#032F62;--shiki-dark:#9ECBFF">'%env(GOOGLE_SECRET)%'</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      scope</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:               </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"email profile"</span></span></code></pre>
</div>

<p>Because I don’t want to share my Google credentials in version control, I used environment variables. You can set them in your <code>.env</code> or <code>.env.local</code> file:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># .env.local</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">GOOGLE_ID</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'your_google_client_id'</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">GOOGLE_SECRET</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'your_google_client_secret'</span></span></code></pre>
</div>

<p>Now, to make our user able to log in with Google, we need to set up a firewall in our <code>security.yaml</code>:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-highlighted" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># config/packages/security.yaml</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">security</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  firewalls</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      pattern</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">^/</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      lazy</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      provider</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">app_user_provider</span></span><span class="line"></span><span class="line highlighted"><span style="color:#22863A;--shiki-dark:#85E89D">      oauth</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span></span><span class="line highlighted"><span style="color:#22863A;--shiki-dark:#85E89D">        resource_owners</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line highlighted"><span style="color:#22863A;--shiki-dark:#85E89D">          google</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">/login/check-google</span><span style="color:#6A737D;--shiki-dark:#6A737D"> # This route must be defined in your routes.yaml</span></span><span class="line highlighted"><span style="color:#22863A;--shiki-dark:#85E89D">        login_path</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">/auth/login</span><span style="color:#6A737D;--shiki-dark:#6A737D"> # This one too</span></span><span class="line highlighted"><span style="color:#22863A;--shiki-dark:#85E89D">        use_forward</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">false</span></span><span class="line highlighted"><span style="color:#22863A;--shiki-dark:#85E89D">        failure_path</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">hwi_oauth_connect_registration</span></span><span class="line highlighted"><span style="color:#22863A;--shiki-dark:#85E89D">        oauth_user_provider</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line highlighted"><span style="color:#22863A;--shiki-dark:#85E89D">          service</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">hwi_oauth.user.provider.entity</span></span></code></pre>
</div>

<p>Say the user successfully logs in with Google, <code>HWIOAuthBundle</code> needs a service that is able to load users based on the user response of the OAuth endpoint. As I am using Doctrine ORM to store my users, I chose the <code>hwi_oauth.user.provider.entity</code> service.</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># config/services.yaml</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">services</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  # ... other services</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  hwi_oauth.user.provider.entity</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    class</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">HWI\Bundle\OAuthBundle\Security\Core\User\EntityUserProvider</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    arguments</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      $class</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">App\Entity\User</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      $properties</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">        'google'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">'googleId'</span></span></code></pre>
</div>

<p>It will only work if our <code>User</code> entity implements the <code>HWI\Bundle\OAuthBundle\Security\Core\User\OAuthUserProviderInterface</code>. Here is how I did it:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-diff" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// src/Entity/User.php</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">#[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">ORM\Entity</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">repositoryClass</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">UserRepository</span><span style="color:#D73A49;--shiki-dark:#F97583">::class</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)]</span></span><span class="line diff remove"><span style="color:#D73A49;--shiki-dark:#F97583">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> User</span><span style="color:#D73A49;--shiki-dark:#F97583"> implements</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> UserInterface</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">PasswordAuthenticatedUserInterface</span></span><span class="line diff add"><span style="color:#6F42C1;--shiki-dark:#B392F0">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> User</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> implements</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> UserInterface</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">PasswordAuthenticatedUserInterface</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">OAuthAwareUserProviderInterface</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // ...</span></span><span class="line"></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">    #[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">ORM\Column</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">length</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">255</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">nullable</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)] </span></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#D73A49;--shiki-dark:#F97583"> ?string</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $googleId </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span><span class="line diff add"></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">    #[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">Groups</span><span style="color:#24292E;--shiki-dark:#E1E4E8">([</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'user:read'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">])]</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">    #[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">ORM\Column</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">type</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">Types</span><span style="color:#D73A49;--shiki-dark:#F97583">::</span><span style="color:#005CC5;--shiki-dark:#79B8FF">TEXT</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6F42C1;--shiki-dark:#B392F0">nullable</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)]</span></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#D73A49;--shiki-dark:#F97583"> ?string</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $avatar </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span><span class="line"></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> loadUserByOAuthUserResponse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">UserResponseInterface</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $response)</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> UserInterface</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { </span></span><span class="line diff add"><span style="color:#005CC5;--shiki-dark:#79B8FF">        $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">setEmail</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($response</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getEmail</span><span style="color:#24292E;--shiki-dark:#E1E4E8">());</span></span><span class="line diff add"><span style="color:#005CC5;--shiki-dark:#79B8FF">        $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">setFirstname</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($response</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getFirstName</span><span style="color:#24292E;--shiki-dark:#E1E4E8">());</span></span><span class="line diff add"><span style="color:#005CC5;--shiki-dark:#79B8FF">        $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">setLastname</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($response</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getLastName</span><span style="color:#24292E;--shiki-dark:#E1E4E8">());</span></span><span class="line diff add"><span style="color:#005CC5;--shiki-dark:#79B8FF">        $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">setAvatar</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($response</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getProfilePicture</span><span style="color:#24292E;--shiki-dark:#E1E4E8">());</span></span><span class="line diff add"><span style="color:#005CC5;--shiki-dark:#79B8FF">        $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">setGoogleId</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($response</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getUserIdentifier</span><span style="color:#24292E;--shiki-dark:#E1E4E8">());</span></span><span class="line diff add"></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> $this</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div>

<p>At this point, you should be able to log your users in with Google. Great! But we do not have a JWT token yet, and it is necessary for the frontend to authenticate with our API.</p>

<h2 id="generating-a-jwt-token">Generating a JWT token</h2>

<p>To generate a JWT token, we will use <code>lexik/jwt-authentication-bundle</code>. You can read the API Platform <a href="https://api-platform.com/docs/core/jwt/">JWT documentation</a> or follow this guide which is simplified. Let’s install it:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">composer</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> require</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> lexik/jwt-authentication-bundle</span></span></code></pre>
</div>

<p>JWT tokens are secure because they are signed with a secret key. We need to generate a key pair:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">symfony</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> console</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> lexik:jwt:generate-keypair</span></span></code></pre>
</div>

<p>Now, let’s configure a new firewall in our <code>security.yaml</code> for the JWT token:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-diff" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># config/packages/security.yaml</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">security</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  firewalls</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">    api</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">      pattern</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">^/api/</span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">      stateless</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">      provider</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">app_user_provider</span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">      jwt</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">~</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">      # Same as before here</span></span></code></pre>
</div>

<p>If you configured a <code>json_login</code> firewall, you can set the success and failure handlers to the following:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-diff" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># config/packages/security.yaml</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">security</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  firewalls</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    api</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#6A737D;--shiki-dark:#6A737D"># ...</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">      # ...</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      json_login</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">        # ...</span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">        success_handler</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">lexik_jwt_authentication.handler.authentication_success</span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">        failure_handler</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">lexik_jwt_authentication.handler.authentication_failure</span></span></code></pre>
</div>

<h2 id="make-hwioauthbundle-return-a-jwt-token">Make <code>HWIOAuthBundle</code> return a JWT token</h2>

<p>Based on the previous code example, my guess was that setting the <code>success_handler</code> in the <code>oauth</code> configuration would make <code>HWIOAuthBundle</code> return a JWT token. And it did! Here is the updated <code>security.yaml</code>:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-diff" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># config/packages/security.yaml</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">security</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  firewalls</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">      # ...</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      oauth</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">        # ...</span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">        success_handler</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">lexik_jwt_authentication.handler.authentication_success</span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">        failure_handler</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">lexik_jwt_authentication.handler.authentication_failure</span></span></code></pre>
</div>

<p>Now, when we visit the URL <code>/connect/google</code> and log in using Google, we receive a JSON Web Token (JWT) in the response. However, we cannot utilize it immediately because we need to send it back to the frontend.</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span>{ "token": "..." }</span></span></code></pre>
</div>

<h2 id="retrieve-the-jwt-token-from-the-backend">Retrieve the JWT token from the backend</h2>

<p>Our frontend is a Vue.js application hosted on a different domain from our Symfony application. Due to the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite">SameSite cookie attribute</a>, we can’t use cookies to store the JWT token. Instead, we’ll store the JWT token in <code>localStorage</code>.</p>

<p>The examples I’ll provide are adapted for Vue.js 3, but they’re easily adaptable to any JavaScript framework.</p>

<p>To handle authentication, I created an <code>auth</code> store based on <a href="https://pinia.vuejs.org">Pinia</a>:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// src/stores/auth.ts</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">import</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { defineStore } </span><span style="color:#D73A49;--shiki-dark:#F97583">from</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 'pinia'</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">import</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { ref } </span><span style="color:#D73A49;--shiki-dark:#F97583">from</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 'vue'</span></span><span class="line"></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">export</span><span style="color:#D73A49;--shiki-dark:#F97583"> const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> useAuthStore</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> defineStore</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'auth'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, () </span><span style="color:#D73A49;--shiki-dark:#F97583">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> jwt</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF">string</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> currentUser</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">User</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span><span class="line"></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { jwt, currentUser }</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div>

<p>Now, we need to call the <code>/connect/google</code> endpoint from our Vue.js application in a new window:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-diff" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">export</span><span style="color:#D73A49;--shiki-dark:#F97583"> const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> useAuthStore</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> defineStore</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'auth'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, () </span><span style="color:#D73A49;--shiki-dark:#F97583">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // ...</span></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">  const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> loginWith</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">service</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 'google'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { </span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">    window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">open</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">`http://localhost/connect/${</span><span style="color:#24292E;--shiki-dark:#E1E4E8">service</span><span style="color:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span><span class="line"></span><span class="line diff remove"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { jwt, currentUser } </span></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { jwt, currentUser, loginWith } </span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#22863A;--shiki-dark:#85E89D">script</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="color:#24292E;--shiki-dark:#E1E4E8">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"ts"</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> setup</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  import</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { useAuthStore } </span><span style="color:#D73A49;--shiki-dark:#F97583">from</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> '@/stores/auth'</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> authStore</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> useAuthStore</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="color:#22863A;--shiki-dark:#85E89D">script</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;</span></span><span class="line"></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#22863A;--shiki-dark:#85E89D">template</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="color:#22863A;--shiki-dark:#85E89D">button</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> @</span><span style="color:#6F42C1;--shiki-dark:#B392F0">click</span><span style="color:#24292E;--shiki-dark:#E1E4E8">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">authStore.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">loginWith</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'google'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;Login with Google&#x3C;/</span><span style="color:#22863A;--shiki-dark:#85E89D">button</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="color:#22863A;--shiki-dark:#85E89D">template</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;</span></span></code></pre>
</div>

<p>Now, when the user clicks the « Login with Google » button, a new window opens, redirecting the user to the <code>/connect/google</code> endpoint. The user authenticates with Google, and the backend responds with a JWT token.</p>

<p>Currently, we can’t intercept the response in the frontend because the new window is on a different domain. To resolve this, we need to utilize the <code>postMessage</code> API to send the JWT token from the backend to the frontend.</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-diff" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// src/stores/auth.ts</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> loginWith</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">service</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 'google'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">open</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">`http://localhost/connect/${</span><span style="color:#24292E;--shiki-dark:#E1E4E8">service</span><span style="color:#032F62;--shiki-dark:#9ECBFF">}`</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">  window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">addEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'message'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, receiveMessage) </span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span><span class="line"></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> receiveMessage</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">event</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> MessageEvent</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { </span></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">  if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (event.data.type </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 'authentication'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">    jwt.value </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> event.data.token</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">    window.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">removeEventListener</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'message'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, receiveMessage)</span></span><span class="line diff add"><span style="color:#6F42C1;--shiki-dark:#B392F0">    loadCurrentUser</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div>

<p>The Lexik JWT bundle sends the JWT token in the response with the <code>application/json</code> content type. However, if we intend to use the <code>postMessage</code> API, we must send the response with the <code>text/html</code> content type and include the necessary script in the response.</p>

<p>To accomplish this, we need to create a custom response handler that utilizes the <code>lexik_jwt_authentication.handler.authentication_success</code> service. Here’s how I implemented it:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-highlighted" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// src/Security/OAuthJwtSuccessHandler.php</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">namespace</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> App\Security</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span><span class="line"></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">use</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">use</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Symfony\Component\HttpFoundation\Request</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">use</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Symfony\Component\Security\Core\Authentication\Token\TokenInterface</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">use</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Symfony\Component\HttpFoundation\Response</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">use</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Symfony\Component\Security\Http\Authentication\AuthenticationSuccessHandlerInterface</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span><span class="line"></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> OAuthJwtSuccessHandler</span><span style="color:#D73A49;--shiki-dark:#F97583"> implements</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> AuthenticationSuccessHandlerInterface</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> __construct</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">        // This is auto injected by Symfony</span></span><span class="line highlighted"><span style="color:#D73A49;--shiki-dark:#F97583">        private</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> AuthenticationSuccessHandler</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $jwtSuccessHandler, </span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ) {</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span><span class="line"></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> onAuthenticationSuccess</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">Request</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $request, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">TokenInterface</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $token)</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#D73A49;--shiki-dark:#F97583"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF">Response</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span><span class="line highlighted"><span style="color:#24292E;--shiki-dark:#E1E4E8">        $response </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">jwtSuccessHandler</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">onAuthenticationSuccess</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($request, $token); </span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        $body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> json_decode</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($response</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getContent</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(), </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        $jwt </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $body[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'token'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">];</span></span><span class="line"></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Response</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'&#x3C;html&gt;&#x3C;body&gt;&#x3C;script&gt;</span></span><span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">            window.opener.postMessage({</span></span><span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">                type: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">\'</span><span style="color:#032F62;--shiki-dark:#9ECBFF">authentication</span><span style="color:#005CC5;--shiki-dark:#79B8FF">\'</span><span style="color:#032F62;--shiki-dark:#9ECBFF">,</span></span><span class="line highlighted"><span style="color:#032F62;--shiki-dark:#9ECBFF">                token: '</span><span style="color:#D73A49;--shiki-dark:#F97583"> .</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> json_encode</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($jwt) </span><span style="color:#D73A49;--shiki-dark:#F97583">.</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ',</span></span><span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">            }, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">\'</span><span style="color:#032F62;--shiki-dark:#9ECBFF">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF">\'</span><span style="color:#032F62;--shiki-dark:#9ECBFF">);</span></span><span class="line highlighted"><span style="color:#032F62;--shiki-dark:#9ECBFF">            window.close();</span></span><span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">        &#x3C;/script&gt;&#x3C;/body&gt;&#x3C;/html&gt;'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div>

<p>Notice how I replaced the <code>JWTAuthenticationBundle</code> response with a custom one that includes only the essential elements to send the JWT token to the frontend. Additionally, the window will automatically close itself once the token is transmitted.</p>

<p>Next, we must configure this newly created handler in our <code>security.yaml</code> file.</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-diff" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># config/packages/security.yaml</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">security</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  firewalls</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">      # ...</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      oauth</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">        # ...</span></span><span class="line diff remove"><span style="color:#22863A;--shiki-dark:#85E89D">        success_handler</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">lexik_jwt_authentication.handler.authentication_success</span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">        success_handler</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">App\Security\OAuthJwtSuccessHandler</span><span style="color:#6A737D;--shiki-dark:#6A737D"> # This is our custom handler</span></span></code></pre>
</div>

<p>Now, when a user logs in using Google, the backend sends the JWT token to the frontend using the <code>postMessage</code> API. The frontend can then store the JWT token in the <code>localStorage</code> and use it to authenticate with the API.</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-diff" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// src/stores/auth.ts</span></span><span class="line diff remove"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> jwt</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF">string</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span></span><span class="line diff remove"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> currentUser</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">User</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> stored</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(localStorage.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getItem</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'auth'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">||</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 'null'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> jwt</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF">string</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;(stored </span><span style="color:#D73A49;--shiki-dark:#F97583">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> stored.jwt </span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> currentUser</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ref</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">User</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">&gt;(stored </span><span style="color:#D73A49;--shiki-dark:#F97583">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> stored.currentUser </span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> null</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span><span class="line"></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// ...</span></span><span class="line"></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// Any time the JWT token or the current user changes, we store them in the localStorage</span></span><span class="line diff add"><span style="color:#6F42C1;--shiki-dark:#B392F0">watch</span><span style="color:#24292E;--shiki-dark:#E1E4E8">([jwt, currentUser], () </span><span style="color:#D73A49;--shiki-dark:#F97583">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {  </span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">  localStorage.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">setItem</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">'auth'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">stringify</span><span style="color:#24292E;--shiki-dark:#E1E4E8">({ jwt: jwt.value, currentUser: currentUser.value }))</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div>

<p>Congratulations! You now have a method to log in users with Google OAuth and authenticate them with your API using a JWT token.</p>

<p>However, there’s one additional step. Since your new users aren’t registered in your database yet.</p>

<h2 id="registering-users-after-oauth-success">Registering users after OAuth success</h2>

<p>The <code>HWIOAuthBundle</code> offers a user registration mechanism called <code>connect</code>. While I’m confident it functions effectively, it relies on Symfony forms, which I’m refraining from using since I’m opting for Vue.js instead. My intention is to have users automatically registered upon their successful Google login.</p>

<p>Additionally, when attempting to buypass the form step, I encountered an error.</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-highlighted" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line highlighted error"><span>Account could not be linked correctly.</span></span></code></pre>
</div>

<p>After hours of debugging and searching online, I abandoned using this <code>connect</code> feature. However, I discovered that the class <a href="https://github.com/hwi/HWIOAuthBundle/blob/c9cd9f2ffa55a353b6902eb811315ebd3782d3bd/src/Security/Core/User/EntityUserProvider.php"><code>EntityUserProvider.php</code></a> from <code>HWIOAuthBundle</code> was responsible for retrieving the user from the database. Instead of throwing an exception, I decided to override it and create a new user if it didn’t exist.</p>

<p>I won’t provide the entire class here, but you can find it in the link above. Here’s the part I modified:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-diff" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// src/Security/EntityUserProvider.php</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> loadUserByOAuthUserResponse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">UserResponseInterface</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $response)</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#D73A49;--shiki-dark:#F97583"> ?</span><span style="color:#005CC5;--shiki-dark:#79B8FF">UserInterface</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    $resourceOwnerName </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $response</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getResourceOwner</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getName</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span><span class="line"></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#005CC5;--shiki-dark:#79B8FF">isset</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">$this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">properties[$resourceOwnerName])) {</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        throw</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> \RuntimeException</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">sprintf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"No property defined for entity for resource owner '%s'."</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, $resourceOwnerName));</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span><span class="line"></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    $username </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> method_exists</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($response, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">'getUserIdentifier'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $response</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getUserIdentifier</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $response</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getUserIdentifier</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#005CC5;--shiki-dark:#79B8FF">null</span><span style="color:#D73A49;--shiki-dark:#F97583"> ===</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $user </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">findUser</span><span style="color:#24292E;--shiki-dark:#E1E4E8">([</span><span style="color:#005CC5;--shiki-dark:#79B8FF">$this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">properties[$resourceOwnerName] </span><span style="color:#D73A49;--shiki-dark:#F97583">=&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $username])) {</span></span><span class="line diff remove"><span style="color:#D73A49;--shiki-dark:#F97583">        throw</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createUserNotFoundException</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($username, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">sprintf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"User '%s' not found."</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, $username)); </span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">        $user </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">registerUser</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($response); </span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span><span class="line"></span><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $user;</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span><span class="line"></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">private</span><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> registerUser</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">UserResponseInterface</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $response)</span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> UserInterface</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span><span class="line diff add"><span style="color:#6A737D;--shiki-dark:#6A737D">    /** </span><span style="color:#D73A49;--shiki-dark:#F97583">@var</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> User</span><span style="color:#6A737D;--shiki-dark:#6A737D"> */</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">    $user </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">class</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span><span class="line diff add"><span style="color:#24292E;--shiki-dark:#E1E4E8">    $user</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">loadUserByOAuthUserResponse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($response);</span></span><span class="line diff add"><span style="color:#005CC5;--shiki-dark:#79B8FF">    $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">em</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">persist</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($user);</span></span><span class="line diff add"><span style="color:#005CC5;--shiki-dark:#79B8FF">    $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">em</span><span style="color:#D73A49;--shiki-dark:#F97583">-&gt;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">flush</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span><span class="line diff add"></span><span class="line diff add"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $user;</span></span><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>
</div>

<p>Despite this, we must instruct the <code>HWIOAuthBundle</code> to utilize our custom <code>EntityUserProvider</code> service. Here’s how I accomplished it:</p>

<div class="code-block"><pre class="shiki shiki-themes github-light github-dark has-diff" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8" tabindex="0"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># config/services.yaml</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">services</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  # ... other services</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  hwi_oauth.user.provider.entity</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line diff remove"><span style="color:#22863A;--shiki-dark:#85E89D">    class</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">HWI\Bundle\OAuthBundle\Security\Core\User\EntityUserProvider</span></span><span class="line diff add"><span style="color:#22863A;--shiki-dark:#85E89D">    class</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">App\Security\EntityUserProvider</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    arguments</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      $class</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">App\Entity\User</span></span><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      $properties</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span><span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">        'google'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">'googleId'</span></span></code></pre>
</div>

<p>And finally, if our users log in using Google OAuth and haven’t been registered in our database yet, they’ll be automatically registered.</p>

<h2 id="conclusion">Conclusion</h2>

<p>In this article, we explored how to log in users with Google OAuth and authenticate them with your API using a JWT token. I hope you found it helpful. If you have any questions or feedback, please don’t hesitate to reach out to me on X (<a href="https://x.com/d9beuD">@d9beuD</a>).</p>]]></content><author><name>Vincent BATHELIER</name></author><category term="symfony" /><category term="api-platform" /><category term="google" /><category term="oauth" /><category term="php" /><category term="api" /><category term="vue" /><summary type="html"><![CDATA[I recently started a new project using Symfony 7, API Platform, and Vue.js 3. I wanted to allow users to log in or register with their Google account. Here is how I did it.]]></summary></entry></feed>